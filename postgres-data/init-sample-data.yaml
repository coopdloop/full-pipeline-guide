# postgres-data/init-sample-data.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: init-sample-data
spec:
  template:
    spec:
      containers:
      - name: init-sample-data
        image: postgres:13
        command:
        - /bin/bash
        - -c
        - |
          psql "postgresql://postgres:redashpassword@redash-dashboard-postgresql:5432/redash" <<'EOSQL'
          -- Create sales table
          CREATE TABLE sales (
              id SERIAL PRIMARY KEY,
              sale_date DATE,
              product_name VARCHAR(100),
              category VARCHAR(50),
              quantity INTEGER,
              unit_price DECIMAL(10,2),
              total_price DECIMAL(10,2),
              region VARCHAR(50)
          );

          -- Insert sample sales data
          INSERT INTO sales (sale_date, product_name, category, quantity, unit_price, total_price, region) VALUES
          ('2024-01-01', 'Laptop Pro', 'Electronics', 5, 1299.99, 6499.95, 'North'),
          ('2024-01-02', 'Smartphone X', 'Electronics', 10, 699.99, 6999.90, 'South'),
          ('2024-01-03', 'Office Chair', 'Furniture', 8, 199.99, 1599.92, 'East'),
          ('2024-01-04', 'Coffee Maker', 'Appliances', 15, 79.99, 1199.85, 'West'),
          ('2024-01-05', 'Gaming Console', 'Electronics', 6, 499.99, 2999.94, 'North'),
          ('2024-02-01', 'Desk Lamp', 'Furniture', 20, 39.99, 799.80, 'South'),
          ('2024-02-02', 'Tablet Mini', 'Electronics', 12, 399.99, 4799.88, 'East'),
          ('2024-02-03', 'Wireless Mouse', 'Electronics', 30, 29.99, 899.70, 'West'),
          ('2024-02-04', 'Keyboard', 'Electronics', 25, 59.99, 1499.75, 'North'),
          ('2024-02-05', 'Monitor 27"', 'Electronics', 7, 299.99, 2099.93, 'South');

          -- Create customer table
          CREATE TABLE customers (
              id SERIAL PRIMARY KEY,
              name VARCHAR(100),
              email VARCHAR(100),
              country VARCHAR(50),
              join_date DATE,
              total_orders INTEGER,
              customer_segment VARCHAR(50)
          );

          -- Insert sample customer data
          INSERT INTO customers (name, email, country, join_date, total_orders, customer_segment) VALUES
          ('John Smith', 'john@example.com', 'USA', '2024-01-01', 5, 'Premium'),
          ('Maria Garcia', 'maria@example.com', 'Spain', '2024-01-15', 3, 'Standard'),
          ('James Wilson', 'james@example.com', 'UK', '2024-01-20', 8, 'Premium'),
          ('Anna Kowalski', 'anna@example.com', 'Poland', '2024-02-01', 2, 'Standard'),
          ('Mohammed Ahmed', 'mohammed@example.com', 'UAE', '2024-02-05', 6, 'Premium');

          -- Create inventory table
          CREATE TABLE inventory (
              id SERIAL PRIMARY KEY,
              product_name VARCHAR(100),
              category VARCHAR(50),
              stock_quantity INTEGER,
              reorder_point INTEGER,
              last_restock_date DATE,
              supplier VARCHAR(100)
          );

          -- Insert sample inventory data
          INSERT INTO inventory (product_name, category, stock_quantity, reorder_point, last_restock_date, supplier) VALUES
          ('Laptop Pro', 'Electronics', 25, 10, '2024-01-15', 'TechSupply Co'),
          ('Smartphone X', 'Electronics', 40, 15, '2024-01-20', 'MobileWorld'),
          ('Office Chair', 'Furniture', 30, 8, '2024-02-01', 'FurnishPro'),
          ('Coffee Maker', 'Appliances', 20, 5, '2024-02-05', 'HomeGoods'),
          ('Gaming Console', 'Electronics', 15, 5, '2024-02-10', 'GameStore');

          -- Create performance metrics table
          CREATE TABLE performance_metrics (
              id SERIAL PRIMARY KEY,
              metric_date DATE,
              website_visits INTEGER,
              conversion_rate DECIMAL(5,2),
              avg_order_value DECIMAL(10,2),
              customer_satisfaction DECIMAL(3,1)
          );

          -- Insert sample performance data
          INSERT INTO performance_metrics (metric_date, website_visits, conversion_rate, avg_order_value, customer_satisfaction) VALUES
          ('2024-01-01', 1500, 2.5, 125.50, 4.2),
          ('2024-01-02', 1650, 2.8, 135.75, 4.3),
          ('2024-01-03', 1400, 2.3, 115.25, 4.1),
          ('2024-01-04', 1800, 3.0, 145.00, 4.4),
          ('2024-01-05', 1950, 3.2, 155.25, 4.5);

          -- Create some useful views
          CREATE VIEW sales_by_category AS
          SELECT
              category,
              COUNT(*) as number_of_sales,
              SUM(total_price) as total_revenue,
              AVG(total_price) as avg_sale_value
          FROM sales
          GROUP BY category;

          CREATE VIEW customer_segments AS
          SELECT
              customer_segment,
              COUNT(*) as number_of_customers,
              AVG(total_orders) as avg_orders_per_customer
          FROM customers
          GROUP BY customer_segment;

          CREATE VIEW inventory_status AS
          SELECT
              category,
              SUM(stock_quantity) as total_stock,
              COUNT(*) as number_of_products,
              AVG(stock_quantity) as avg_stock_per_product
          FROM inventory
          GROUP BY category;
          EOSQL
      restartPolicy: Never
